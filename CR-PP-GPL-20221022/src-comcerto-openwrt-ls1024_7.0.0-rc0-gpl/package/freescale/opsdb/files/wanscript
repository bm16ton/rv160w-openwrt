#!/bin/sh
. /lib/functions/network.sh
. /lib/config/uci.sh

# We are maintaining following sequece. Same is required in ifstat.c, so order is important.
# For v4 -> "v4,IFACE,IP,GW,DNS1,DNS2,MASK,DDNS_STATUS,DDNS_DETAIL,DDNS_REG_TIME,mac_addres,ifindex"
# For v6 -> "v6,IFACE,IP,GW,DNS1,DNS2,MASK,DHCP_PD_PREFIX,mac_address,ifindex"

TMP_OUTPUT="/tmp/tmpwanstats"
WAN_OUTFILE_FINAL="/tmp/stats/wanstats"
WAN_OUTFILE="/tmp/stats/wanstats.tmp"
WAN_OUTFILE_TMP1="/tmp/stats/wanstats.tmp1"
WAN_OUTFILESTATUS="/tmp/stats/wanstats_status"
LOCKWANSCRIPT="/tmp/.wanscriptLock"

index=50
count=0

# Check signal and delete the lock
wanScriptSigHand () {
	logger -t system "Signal Received. Killing self"
	rm -rf $WAN_OUTFILE_TMP1
	echo "1" > $WAN_OUTFILESTATUS
	lock -u $LOCKWANSCRIPT
	exit 0
}

trap wanScriptSigHand SIGINT SIGHUP SIGTERM SIGSEGV SIGQUIT

while [ 1 ]
do
	lock $LOCKWANSCRIPT
	temp=`cat $WAN_OUTFILESTATUS` >/dev/null 2>&1
	if [ "$temp" == "1" ] || [ -z "$temp" ]
	then
		echo "0" > $WAN_OUTFILESTATUS
		lock -u $LOCKWANSCRIPT
		break
	else
		lock -u $LOCKWANSCRIPT
		sleep 1
		let count++
		if [ $count -eq 60 ]
		then
			exit 0
		fi
		continue
	fi
done

#while [ "$(cat $WAN_OUTFILESTATUS)" -ne 1 -a "$count" -lt 60 ]
#do
#        sleep 1
#        count=$((count+1))
#	if [ "$count" -ge 60 ];then
#		exit 0
#	fi
#done

#echo "0" > $WAN_OUTFILESTATUS

ubus list network.interface.* | awk -F "." '!/loopback|usb|^gre/ {print $3}' > $TMP_OUTPUT

usb1proto=`uci get network.usb1.proto`>/dev/null 2>&1
usb2proto=`uci get network.usb2.proto`>/dev/null 2>&1

case $usb1proto in
	3g)
		echo "usb1" >> $TMP_OUTPUT
	;;
	qmi)
		echo "usb1_4" >> $TMP_OUTPUT
	;;
	mobile)
		detect=$(cat /var/USBCONNSTATUS | awk -F: '{printf $4}')
		if [ "$detect" = "4G" ]; then
			echo "usb1_4" >> $TMP_OUTPUT
		else
			echo "usb1" >> $TMP_OUTPUT
		fi
	;;
esac

case $usb2proto in
	3g)
		echo "usb2" >> $TMP_OUTPUT
	;;
	qmi)
		echo "usb2_4" >> $TMP_OUTPUT
	;;
	mobile)
		detect=$(cat /var/USBCONNSTATUS | awk -F: '{printf $4}')
		if [ "$detect" = "4G" ]; then
			echo "usb2_4" >> $TMP_OUTPUT
		else
			echo "usb2" >> $TMP_OUTPUT
		fi
	;;
esac

rm -rf $WAN_OUTFILE
touch $WAN_OUTFILE

while read -r oper 
do
	case "$oper" in
		vlan*)
		ifstatus=
		ip=
		mask4=
		v4_phy_l2=
		v4_phy_l3=
		dns14=
		dns16=
		gw=
		mac_addr=
		ip4_count=0
		__network_getall_stats_v4 $oper ifstatus ip mask4 v4_phy_l2 v4_phy_l3 dns14 dns16 gw

		mac_addr=`cat /sys/class/net/$v4_phy_l2/address` >/dev/null 2>&1
		[ -n "$ip" ] && ip4_count=1

		ifstatus6=
		ip6=
		mask6=
		v6_phy_l2=
		v6_phy_l3=
		dns16=
		dns26=
		gw6=
		ip6_count=0
		dhcp_pd_prefix=
		
		__network_getall_stats_v6 $oper ifstatus6 v6_phy_l2 v6_phy_l3 dns16 dns26 gw6
		network_get_prefix6 dhcp_pd_prefix $oper
	
		# Get ipv6 ips and count. Using l2 device as we dont have pppoe over lan side 
		[ -n "$v6_phy_l2" ] && {
			ip6=$(ifconfig $v6_phy_l2 | grep "inet6 addr" | cut -f 13 -d ' ') 2>&- >&-
			ip6_count=$(echo $ip6 | wc -w)
			[ "$ip6_count" = "0" ] || ip6=$(echo $ip6 | sed s/'\/'/' '/g)
		}

                oper=$(echo $oper | awk '{print toupper($0)}') 

		index=$((index+1))
                echo v4,$oper,$ip4_count,$ip $mask4,$gw,$dns14,$dns16,0,,,$mac_addr,$index, >> $WAN_OUTFILE
		index=$((index+1))
                echo v6,$oper,$ip6_count,$ip6,$gw6,$dns16,$dns26,$dhcp_pd_prefix,$mac_addr,$index, >> $WAN_OUTFILE
		;;

		wan16* | wan26* | wan1_tun1 | wan2_tun1 | wan1_tun2 | wan2_tun2 | *_PD)
		ifstatus6=
		ip6=
		mask6=
		v6_phy_l2=
		v6_phy_l3=
		final_device=
		dns16=
		dns26=
		gw6=
		ip6_count=0
		dhcp_pd_prefix=
		mac_addr=

		__network_getall_stats_v6 $oper ifstatus6 v6_phy_l2 v6_phy_l3 dns16 dns26 gw6 dhcp_pd_prefix
		network_get_prefix6 dhcp_pd_prefix $oper
		
		mac_addr=`cat /sys/class/net/$v6_phy_l2/address` >/dev/null 2>&1

		# Get ipv6 ips and count. Use l3 device for pppoe and tun interface , else use l2 device.
		final_device="$v6_phy_l3"
		[ -z "$final_device" ] && {
			[ `echo $oper | grep -v "p\|tun"` ] && {
				final_device="$v6_phy_l2"
			}
		}
		
		
		[ -n "$final_device" ] && {
			ip6=$(ifconfig $final_device | grep "inet6 addr" | cut -f 13 -d ' ') 2>&- >&-
			ip6_count=$(echo $ip6 | wc -w)
			[ "$ip6_count" = "0" ] || ip6=$(echo $ip6 | sed s/'\/'/' '/g)
			if [ -n "$(echo $final_device | grep ppoe-)" ];then
				gw6=$(ip -6 route show | grep default | grep $final_device | awk -F ' ' '{print $3}')
			fi
		}

		if [ `echo $oper | grep -E "_PD$"` ];then
			oper=$oper
		elif [ `echo $oper | grep -E "_tun1|_tun2"` ];then
			oper=$(echo $oper | sed 's/\_/-/g' | awk '{print toupper($0)}')	
		else
			new="$(echo $oper | grep "6p\?_" | sed 's/6p\_/-pppoe./g' | sed 's/6\_/./g' | awk '{print toupper($0)}')"
			if [ -z "$new" ]; then
				new="$(echo $oper | grep "6p\?" | sed 's/6p/-pppoe/g' | sed 's/6//g' | awk '{print toupper($0)}')"
				oper=$new
			else
				oper=$new
			fi
		fi
		index=$((index+1))
                echo v6,$oper,$ip6_count,$ip6,$gw6,$dns16,$dns26,$dhcp_pd_prefix,$mac_addr,$index, >> $WAN_OUTFILE
		;;

		*)
		ifstatus=
		ip=
		mask4=
		v4_phy_l2=
		v4_phy_l3=
		dns14=
		dns16=
		gw=
		mac_addr=
		ip4_count=0
		ddns_status=
		ddns_details=
		ddns_time=
		iface_type=
		ddns_interface=$oper
		
		__network_getall_stats_v4 $oper ifstatus ip mask4 v4_phy_l2 v4_phy_l3 dns14 dns16 gw

		mac_addr=`cat /sys/class/net/$v4_phy_l2/address`  >/dev/null 2>&1
		[ -n "$ip" ] && ip4_count=1

		usb_conn=`echo $oper | grep "usb"`
		if [ -n "$usb_conn" ];then
			oper="$(echo $oper | cut -d _ -f 1)"
			ddns_interface=$oper
			oper="$(echo $oper | awk '{print toupper($0)}')"
		else
			proto=`uci get network.$oper.proto`
			iface_type=`uci get network.$oper.type` >/dev/null 2>&1
			new="$(echo $oper | grep "p\?_" | sed 's/p\_/-'"$proto"'./g' | sed 's/\_/./g' | awk '{print toupper($0)}')"
			if [ -z "$new" ]; then
				new="$(echo $oper | grep "p\?" | sed 's/p/-'"$proto"'/g' |  awk '{print toupper($0)}')"
				oper=$new
			else
				oper=$new
			fi
		fi
		
		# Check for bridge interfaces
		[ "$iface_type" = "bridge" ] && {
			oper=`echo $oper | sed s/WAN[1-9]*/\&-BRIDGE/g`
		}
		if [ -f "/var/log/ddns.$ddns_interface.logs" ];then
			ddns_tmp=`cat /var/log/ddns.$ddns_interface.logs | grep "time is"`
			if [ -n "$ddns_tmp" ];then
				# registered
				ddns_status=0
				ddns_details="Succesfully Registered"
				ddns_time=`cat /var/log/ddns.$ddns_interface.logs | grep "time is" | cut -d : -f 3-`

				# write to proper format
				if [ -n "$ddns_time" ];then
					year=`echo $ddns_time | cut -d " " -f 6`
					month=`echo $ddns_time | cut -d " " -f 2`
					case "$month" in
						Jan) month=01 ;;
                               			Feb) month=02 ;;
                               			Mar) month=03 ;;
                               			Apr) month=04 ;;
                               			May) month=05 ;;
                               			Jun) month=06 ;;
                               			Jul) month=07 ;;
                               			Aug) month=08 ;;
                               			Sep) month=09 ;;
                               			Oct) month=10 ;;
                               			Nov) month=11 ;;
                                		Dec) month=12 ;;
					esac
					day=`echo $ddns_time | cut -d " " -f 3`
					time=`echo $ddns_time | cut -d " " -f 4`
					ddns_time=$year:$month:$day:$time
				else
					ddns_time="-"
				fi
			else
				ddns_tmp=`cat /var/log/ddns.$ddns_interface.logs | grep "Update_Failed"`
				if [ -n "$ddns_tmp" ];then
					ddns_status=3
					ddns_details="Update failed"
					ddns_time="-"
				else	
					#ddns_tmp=`cat /var/log/ddns.$ddns_interface.logs | grep "performing update"`
					#if [ -n "$ddns_tmp" ];then
						# registering
						ddns_status=1
						ddns_details="Performing Update"
						ddns_time="-"
						#else
						# no-ip
						#ddns_status=2
						#ddns_details="Did not get ip address"
						#ddns_time="-"
					#fi
				fi
			fi
		else
			# disabled
			ddns_status=4
			ddns_details="Dynamic dns is not configured"
			ddns_time="-"
		fi

		index=$((index+1))
		echo v4,$oper,$ip4_count,$ip $mask4,$gw,$dns14,$dns16,$ddns_status,$ddns_details,$ddns_time,$mac_addr,$index, >> $WAN_OUTFILE
		;;
	esac
done < $TMP_OUTPUT

lock $LOCKWANSCRIPT
cp $WAN_OUTFILE $WAN_OUTFILE_TMP1
echo "1" > $WAN_OUTFILESTATUS
lock -u $LOCKWANSCRIPT

