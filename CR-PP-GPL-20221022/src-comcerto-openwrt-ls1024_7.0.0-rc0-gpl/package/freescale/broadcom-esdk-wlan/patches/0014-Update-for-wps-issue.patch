From 7827fccf30af26177414a6fcfa06483fa6f14b61 Mon Sep 17 00:00:00 2001
From: "ding.wei" <ding.wei@nxp.com>
Date: Wed, 22 Mar 2017 18:15:35 +0800
Subject: [PATCH 14/63] Update-for-wps-issue
Content-Type: text/plain; charset="utf-8"

---
 main/components/apps/wps/brcm_apps/apps/wps_ap.c   |   18 +++-
 main/components/apps/wps/brcm_apps/apps/wps_eap.c  |    7 ++
 main/components/apps/wps/brcm_apps/apps/wps_ui.c   |   17 +++
 .../components/apps/wps/brcm_apps/include/wps_ui.h |    2 +
 .../apps/wps/brcm_apps/linux/wps_linux_cmd.c       |   50 +++++++++
 .../apps/wps/brcm_apps/linux/wps_linux_main.c      |  112 ++++++++++++++++++--
 6 files changed, 193 insertions(+), 13 deletions(-)

diff --git a/main/components/apps/wps/brcm_apps/apps/wps_ap.c b/main/components/apps/wps/brcm_apps/apps/wps_ap.c
index 207d095..904c5bd 100644
--- a/main/components/apps/wps/brcm_apps/apps/wps_ap.c
+++ b/main/components/apps/wps/brcm_apps/apps/wps_ap.c
@@ -55,6 +55,8 @@
 #ifdef WPS_NFC_DEVICE
 #include <wps_nfc.h>
 #endif
+
+#include <bcmnvram.h>
 static void wpsap_start_WPSReg(wpsap_wksp_t *ap_wksp);
 
 #ifdef _TUDEBUGTRACE
@@ -696,10 +698,14 @@ wpsap_readConfigure(wpsap_wksp_t *wps_wksp, DevInfo *ap_devinfo)
 		/* Caution: oob_addenr will over-write akm and wsec */
 		if (oob_addenr) {
 			/* Generate random ssid and key */
+#if 0
 			if (wps_gen_ssid(ssid, sizeof(ssid),
 				wps_get_conf("wps_random_ssid_prefix"),
 				wps_safe_get_conf("eth1_hwaddr")) == FALSE ||
 			    wps_gen_key(psk, sizeof(psk)) == FALSE)
+#else
+			if (wps_gen_key(psk, sizeof(psk)) == FALSE)
+#endif
 				return WPS_ERR_SYSTEM;
 
 			/* Open */
@@ -959,7 +965,8 @@ wpsap_wksp_init(wpsap_wksp_t *ap_wksp)
 
 	/* Get PIN */
 	if (ap_wksp->sc_mode == SCMODE_AP_ENROLLEE) {
-		char *dev_pin = wps_safe_get_conf("wps_device_pin");
+//		char *dev_pin = wps_safe_get_conf("wps_device_pin");
+		char *dev_pin = nvram_safe_get("wps_device_pin");
 #ifdef WPS_NFC_DEVICE
 		char *nfc_ap_pin = wps_ui_get_env("wps_stareg_ap_pin");
 #endif
@@ -1063,10 +1070,17 @@ wpsap_time_check(wpsap_wksp_t *wps_wksp, unsigned long now)
 {
 	int procstate = 0;
 	int rc;
+	int ap_timeout = 0;
+	char *value = NULL;
+
+	value = nvram_safe_get("wps_ap_pin_cnt");
+	ap_timeout = atoi(value);
+	ap_timeout = (ap_timeout > 0 ? ap_timeout : WPS_OVERALL_TIMEOUT);
 
 	/* check overall timeout first */
 	if ((now < wps_wksp->start_time) ||
-		((now - wps_wksp->start_time) > WPS_OVERALL_TIMEOUT)) {
+		((now - wps_wksp->start_time) > ap_timeout)) {
+		wps_set_conf("wps_ap_pin_to", "1");
 		return WPS_RESULT_PROCESS_TIMEOUT;
 	}
 
diff --git a/main/components/apps/wps/brcm_apps/apps/wps_eap.c b/main/components/apps/wps/brcm_apps/apps/wps_eap.c
index 8472e3a..b7951b8 100644
--- a/main/components/apps/wps/brcm_apps/apps/wps_eap.c
+++ b/main/components/apps/wps/brcm_apps/apps/wps_eap.c
@@ -59,6 +59,8 @@
 #include <wps_nfc.h>
 #endif
 
+#include <bcmnvram.h>
+
 #define WPS_IE_BUF_LEN	VNDR_IE_MAX_LEN * 8	/* 2048 */
 
 struct eap_user_list {
@@ -466,6 +468,11 @@ wps_eap_process_msg(char *buf, int buflen)
 			return ret;
 		}
 
+		if (strcmp(nvram_safe_get("wps_ap_pin_to"), "1") == 0) {
+			TUTRACE((TUTRACE_INFO, "WPS device pin is timeout\n"));
+			return ret;
+		}
+
 		/* receive EAP packet and no buttion in UI pushed */
 		mode = SCMODE_AP_ENROLLEE;
 
diff --git a/main/components/apps/wps/brcm_apps/apps/wps_ui.c b/main/components/apps/wps/brcm_apps/apps/wps_ui.c
index 28fcd9f..2a0ea7b 100644
--- a/main/components/apps/wps/brcm_apps/apps/wps_ui.c
+++ b/main/components/apps/wps/brcm_apps/apps/wps_ui.c
@@ -54,6 +54,8 @@ static wps_ui_str_t _wps_ui_cmd_str[] = {
 	{WPS_UI_CMD_NFC_HO_R,	"NFC Hand Over Rqquester"},
 	{WPS_UI_CMD_NFC_FM,	"NFC Format"},
 	{WPS_UI_CMD_MSGLEVEL,	"WPS msglevel"},
+	{WPS_UI_CMD_AP_PIN,	"WPS ap pin"},
+	{WPS_UI_CMD_AP_PIN_TIMEOUT,	"WPS ap pin timeout"},
 	{0,		NULL}
 };
 
@@ -118,6 +120,8 @@ typedef struct {
 	int wps_nfc_err_code;
 #endif
 	unsigned int wps_msglevel;
+	char wps_ap_pin[16];
+	char wps_ap_pin_cnt[16];
 } wps_ui_t;
 
 static wps_hndl_t ui_hndl;
@@ -588,6 +592,8 @@ wps_ui_dump(wps_ui_t *ui)
 	printf("    Autho MAC: %s\n", ui->wps_autho_sta_mac);
 	printf("    STA REG AP PIN: %s\n", ui->wps_stareg_ap_pin);
 	printf("    WPS State: %s\n", ui->wps_scstate);
+	printf("    WPS Device Pin: %s\n", ui->wps_ap_pin);
+	printf("    WPS AP PIN Timeout: %s\n", ui->wps_ap_pin_cnt);
 	printf("=====================================\n");
 
 	return;
@@ -1167,6 +1173,10 @@ all_found:
 				ui->wps_pbc_method = atoi(value);
 			else if (!strcmp(name, "wps_ifname"))
 				wps_strncpy(ui->wps_ifname, value, sizeof(ui->wps_ifname));
+			else if (!strcmp(name, "wps_ap_pin"))
+				wps_strncpy(ui->wps_ap_pin, value, sizeof(ui->wps_ap_pin));
+			else if (!strcmp(name, "wps_ap_pin_cnt"))
+				wps_strncpy(ui->wps_ap_pin_cnt, value, sizeof(ui->wps_ap_pin_cnt));
 			else if (!strcmp(name, "wps_sta_pin"))
 				wps_strncpy(ui->wps_sta_pin, value, sizeof(ui->wps_sta_pin));
 			else if (!strcmp(name, "wps_ssid"))
@@ -1293,6 +1303,12 @@ wps_ui_do_set(char *buf)
 		/* Change the wps_msglevel dynamicly */
 		wps_tutrace_set_msglevel(ui->wps_msglevel);
 	}
+	else if (ui->wps_config_command == WPS_UI_CMD_AP_PIN) {
+		wps_set_conf("wps_device_pin", ui->wps_ap_pin);
+	}
+	else if (ui->wps_config_command == WPS_UI_CMD_AP_PIN_TIMEOUT) {
+		wps_set_conf("wps_ap_pin_cnt", ui->wps_ap_pin_cnt);
+	}
 	else {
 		/* Add in PF #3 */
 		if (ui->wps_config_command == WPS_UI_CMD_START &&
@@ -1360,6 +1376,7 @@ wps_ui_do_set(char *buf)
 							pre_privkey = (char *)wps_nfc_priv_key();
 						}
 #endif
+						wps_set_conf("wps_ap_pin_to", "0");
 						/* WSC 2.0, Request to Enroll TRUE */
 						ret = wpsap_open_session(wps_app,
 							SCMODE_AP_ENROLLEE, ifmac, NULL,
diff --git a/main/components/apps/wps/brcm_apps/include/wps_ui.h b/main/components/apps/wps/brcm_apps/include/wps_ui.h
index 873f464..f402ae2 100644
--- a/main/components/apps/wps/brcm_apps/include/wps_ui.h
+++ b/main/components/apps/wps/brcm_apps/include/wps_ui.h
@@ -46,6 +46,8 @@
 #define WPS_UI_CMD_NFC_HO_R		8
 #define WPS_UI_CMD_NFC_FM		9
 #define WPS_UI_CMD_MSGLEVEL		99
+#define WPS_UI_CMD_AP_PIN		98
+#define WPS_UI_CMD_AP_PIN_TIMEOUT		97
 
 #define IS_WPS_UI_CMD_NFC(cmd)	((cmd) == WPS_UI_CMD_NFC_WR_CFG || \
 				 (cmd) == WPS_UI_CMD_NFC_RD_CFG || \
diff --git a/main/components/apps/wps/brcm_apps/linux/wps_linux_cmd.c b/main/components/apps/wps/brcm_apps/linux/wps_linux_cmd.c
index eb507ff..ff9fac8 100644
--- a/main/components/apps/wps/brcm_apps/linux/wps_linux_cmd.c
+++ b/main/components/apps/wps/brcm_apps/linux/wps_linux_cmd.c
@@ -49,6 +49,8 @@ typedef struct {
 	int wps_nfc_err_code;
 #endif
 	unsigned int wps_msglevel;
+	char wps_ap_pin[16];
+	char wps_ap_pin_timeout[16];
 } wps_env_t;
 
 typedef struct {
@@ -69,6 +71,8 @@ static wps_str_t _cmd_str[] = {
 	{WPS_UI_CMD_NFC_HO_R,	"NFC Hand Over Rqquester"},
 	{WPS_UI_CMD_NFC_FM,	"NFC Format"},
 	{WPS_UI_CMD_MSGLEVEL,	"WPS msglevel"},
+	{WPS_UI_CMD_AP_PIN,	"WPS ap pin"},
+	{WPS_UI_CMD_AP_PIN_TIMEOUT,	"WPS ap pin timeout"},
 	{0,		NULL}
 };
 
@@ -230,6 +234,10 @@ all_found:
 		if (name && value) {
 			if (!strcmp(name, "wps_config_command"))
 				wps_env->wps_config_command = atoi(value);
+			if (!strcmp(name, "wps_ap_pin"))
+				strncpy(wps_env->wps_ap_pin, value, sizeof(wps_env->wps_ap_pin));
+			if (!strcmp(name, "wps_ap_pin_timeout"))
+				strncpy(wps_env->wps_ap_pin_timeout, value, sizeof(wps_env->wps_ap_pin_timeout));
 			else if (!strcmp(name, "wps_action"))
 				wps_env->wps_action = atoi(value);
 			else if (!strcmp(name, "wps_method"))
@@ -592,6 +600,36 @@ wps_configap(char *ifname)
 	set_wps_env(uibuf);
 }
 
+static void
+wps_ap_pin(char *ap_pin)
+{
+	char uibuf[512];
+	struct strbuf b;
+
+	str_binit(&b, uibuf, sizeof(uibuf));
+
+	str_bprintf(&b, "SET ");
+	str_bprintf(&b, "wps_config_command=%d ", WPS_UI_CMD_AP_PIN);
+	str_bprintf(&b, "wps_ap_pin=%s ", ap_pin);
+
+	set_wps_env(uibuf);
+}
+
+static void
+wps_ap_pin_timeout(char *ap_pin_timeout)
+{
+	char uibuf[512];
+	struct strbuf b;
+
+	str_binit(&b, uibuf, sizeof(uibuf));
+
+	str_bprintf(&b, "SET ");
+	str_bprintf(&b, "wps_config_command=%d ", WPS_UI_CMD_AP_PIN_TIMEOUT);
+	str_bprintf(&b, "wps_ap_pin_cnt=%s ", ap_pin_timeout);
+
+	set_wps_env(uibuf);
+}
+
 static int
 wps_pin_check(char *pin_string)
 {
@@ -907,6 +945,8 @@ main(int argc, char *argv[])
 	if (!command ||
 		(strcmp(command, "stop") != 0 &&
 		strcmp(command, "configap") != 0 &&
+		strcmp(command, "wps_ap_pin") != 0 &&
+		strcmp(command, "wps_ap_pin_to") != 0 &&
 		strcmp(command, "addenrollee") != 0 &&
 		strcmp(command, "enroll") != 0 &&
 #ifdef WPS_NFC_DEVICE
@@ -938,6 +978,16 @@ main(int argc, char *argv[])
 		return 0;
 	}
 
+	if (!strcmp(command, "wps_ap_pin")) {
+		wps_ap_pin(*argv);
+		return 0;
+	}
+
+	if (!strcmp(command, "wps_ap_pin_to")) {
+		wps_ap_pin_timeout(*argv);
+		return 0;
+	}
+	
 	/*
 	  * Process ifname
 	  */
diff --git a/main/components/apps/wps/brcm_apps/linux/wps_linux_main.c b/main/components/apps/wps/brcm_apps/linux/wps_linux_main.c
index b466551..467d8bc 100644
--- a/main/components/apps/wps/brcm_apps/linux/wps_linux_main.c
+++ b/main/components/apps/wps/brcm_apps/linux/wps_linux_main.c
@@ -311,6 +311,11 @@ set_wsec(char *ifname, void *credential, int mode)
 	char prefix[] = "wlXXXXXXXXXX_";
 	bool b_wps_version2 = false;
 	char *value;
+	int new_auth = 0;
+	int new_wpa_auth = 0;
+	int new_wsec_restric = 1;
+	int new_wsec = 0;
+	int new_eap_restric = 0;
 
 	value = nvram_get("wps_version2");
 	if (value && !strcmp(value, "enabled"))
@@ -344,30 +349,55 @@ set_wsec(char *ifname, void *credential, int mode)
 		psk_mode |= 2;
 	}
 
+//	value = nvram_get(strcat_r(prefix, "wps_cfg_disabled", tmp));
+//	if (value != NULL && strcmp(value, "1") == 0)
+//		return 1;
+
 	switch (psk_mode) {
 	case 1:
 		wps_osl_set_conf(strcat_r(prefix, "akm", tmp), "psk ");
+		new_wpa_auth = 4;
+		new_wsec = 2;
 		break;
 	case 2:
 		wps_osl_set_conf(strcat_r(prefix, "akm", tmp), "psk2 ");
+		new_wpa_auth = 128;
+		new_wsec = 4;
 		break;
 	case 3:
 		wps_osl_set_conf(strcat_r(prefix, "akm", tmp), "psk psk2 ");
+		new_wpa_auth = 132;
+		new_wsec = 6;
 		break;
 	default:
 		wps_osl_set_conf(strcat_r(prefix, "akm", tmp), "");
+		new_wpa_auth = 0;
+		new_wsec = 0;
 		break;
 	}
 
-	if (findstr(cred->keyMgmt, "SHARED"))
+	if (findstr(cred->keyMgmt, "SHARED")) {
 		wps_osl_set_conf(strcat_r(prefix, "auth", tmp), "1");
-	else
+		new_auth = 1;
+	}
+	else {
 		wps_osl_set_conf(strcat_r(prefix, "auth", tmp), "0");
+		new_auth = 0;
+	}
 
 	/* set SSID */
+	wlc_ssid_t ssid;
 	wps_osl_set_conf(strcat_r(prefix, "ssid", tmp), cred->ssid);
-	if (psk_mode)
+	
+	ssid.SSID_len = cred->ssidLen;
+	strncpy((char *)ssid.SSID, cred->ssid, cred->ssidLen);
+
+	/* Update SSID */
+	wl_ioctl(ifname, WLC_SET_SSID, &ssid, sizeof(ssid));
+
+	if (psk_mode) {
 		wps_osl_set_conf(strcat_r(prefix, "wep", tmp), "disabled");
+	}
 
 	/* for version 2, force aes if tkip is on */
 	if (b_wps_version2 && (cred->encrType & WPS_ENCRTYPE_TKIP)) {
@@ -375,18 +405,29 @@ set_wsec(char *ifname, void *credential, int mode)
 	}
 
 	/* set Encr type */
-	if (cred->encrType == WPS_ENCRTYPE_NONE)
+	if (cred->encrType == WPS_ENCRTYPE_NONE) {
 		wps_osl_set_conf(strcat_r(prefix, "wep", tmp), "disabled");
-	else if (cred->encrType == WPS_ENCRTYPE_WEP)
+	}
+	else if (cred->encrType == WPS_ENCRTYPE_WEP) {
 		wps_osl_set_conf(strcat_r(prefix, "wep", tmp), "enabled");
-	else if (cred->encrType == WPS_ENCRTYPE_TKIP)
+		new_wsec = 1;
+	}
+	else if (cred->encrType == WPS_ENCRTYPE_TKIP) {
 		wps_osl_set_conf(strcat_r(prefix, "crypto", tmp), "tkip");
-	else if (cred->encrType == WPS_ENCRTYPE_AES)
+		new_wsec = 2;
+	}
+	else if (cred->encrType == WPS_ENCRTYPE_AES) {
 		wps_osl_set_conf(strcat_r(prefix, "crypto", tmp), "aes");
-	else if (cred->encrType == (WPS_ENCRTYPE_TKIP | WPS_ENCRTYPE_AES))
+		new_wsec = 4;
+	}
+	else if (cred->encrType == (WPS_ENCRTYPE_TKIP | WPS_ENCRTYPE_AES)) {
 		wps_osl_set_conf(strcat_r(prefix, "crypto", tmp), "tkip+aes");
-	else
+		new_wsec = 6;
+	}
+	else {
 		wps_osl_set_conf(strcat_r(prefix, "crypto", tmp), "tkip");
+		new_wsec = 2;
+	}
 
 	if (cred->encrType == WPS_ENCRTYPE_WEP) {
 		char buf[16] = {0};
@@ -408,6 +449,20 @@ set_wsec(char *ifname, void *credential, int mode)
 		}
 	}
 
+	new_auth = htod32(new_auth);
+	new_wpa_auth = htod32(new_wpa_auth);
+	new_eap_restric = htod32(new_eap_restric);
+	new_wsec = htod32(new_wsec);
+	new_wsec_restric = htod32(new_wsec_restric);
+
+	wl_ioctl(ifname, WLC_DOWN, NULL, 0);
+	wl_ioctl(ifname, WLC_SET_AUTH, &new_auth, sizeof(int));
+	wl_ioctl(ifname, WLC_SET_WPA_AUTH, &new_wpa_auth, sizeof(int));
+	wl_ioctl(ifname, WLC_SET_EAP_RESTRICT, &new_eap_restric, sizeof(int));
+	wl_ioctl(ifname, WLC_SET_WSEC, &new_wsec, sizeof(int));
+	wl_ioctl(ifname, WLC_SET_WEP_RESTRICT, &new_wsec_restric, sizeof(int));
+	wl_ioctl(ifname, WLC_UP, NULL, 0);
+
 	/* Disable nmode for WEP and TKIP for TGN spec */
 	switch (cred->encrType) {
 	case WPS_ENCRTYPE_WEP:
@@ -531,10 +586,15 @@ wps_set_wsec(int ess_id, char *wps_ifname, void *credential, int mode)
 	}
 
 	/* Apply the wsec */
+#if 0
 	foreach(ifname, wlnames, next) {
 		set_wsec(ifname, credential, mode);
 		TUTRACE((TUTRACE_INFO, "wps_set_wsec: Set config to %s\n", ifname));
 	}
+#else
+	set_wsec(wps_ifname, credential, mode);
+	TUTRACE((TUTRACE_INFO, "wps_set_wsec: Set config to %s\n", wps_ifname));
+#endif
 
 	/*
 	 * Do commit
@@ -1176,6 +1236,29 @@ wps_osl_build_conf()
 	}
 }
 
+static int nas_restart(void)
+{
+	int ret;
+
+	ret = eval("start-stop-daemon", "-K", "-q", "-s", "SIGKILL", "-n", "nas");
+	WpsSleepMs(500);
+
+	ret = eval("start-stop-daemon", "-S", "-b", "-x", "nas");
+
+	return ret;
+}
+
+static int eapd_restart(void)
+{
+	int ret;
+
+	ret = eval("start-stop-daemon", "-K", "-q", "-s", "SIGKILL", "-n", "eapd");
+	WpsSleepMs(500);
+
+	ret = eval("start-stop-daemon", "-S", "-b", "-x", "eapd");
+
+	return ret;
+}
 
 /*
  * Name        : main
@@ -1221,6 +1304,8 @@ main(int argc, char* argv[])
 	signal(SIGTERM, wps_stophandler);
 	signal(SIGUSR1, wps_restarthandler);
 
+wps_monitor_restart:
+
 	RAND_linux_init();
 
 	/* Default settings validation */
@@ -1243,8 +1328,13 @@ main(int argc, char* argv[])
 		nvram_set("wps_restart", "1");
 
 	/* need restart wireless */
-	if (flag & WPSM_WKSP_FLAG_RESTART_WL)
-		wps_osl_restart_wl();
+	if (flag & WPSM_WKSP_FLAG_RESTART_WL) {
+		WpsSleep(1);
+		eapd_restart();
+		nas_restart();	
+		goto wps_monitor_restart;
+	//	wps_osl_restart_wl();
+	}
 
 	/* Destroy pid file */
 	unlink(WPSM_PID_FILE_PATH);
-- 
1.7.10

