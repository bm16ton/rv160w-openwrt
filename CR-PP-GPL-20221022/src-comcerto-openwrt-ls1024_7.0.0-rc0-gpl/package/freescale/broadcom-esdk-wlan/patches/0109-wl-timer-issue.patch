From 87f8486281bbfd50442fb6906ca30658aa72f980 Mon Sep 17 00:00:00 2001
From: Veeresh Sajjan <veeresh.sajjan@nxp.com>
Date: Fri, 5 Jul 2019 13:20:54 +0530
Subject: [PATCH 2/2] SBR-5599 Fix for Router freeze when the Belkin devices
 connected to the AP

- The code changes are obtained from BRCM as part of CS7183854
Signed-off-by: Veeresh Sajjan <veeresh.sajjan@nxp.com>
---
 main/components/router/acsd/Makefile        |   2 +-
 main/components/router/eapd/linux/Makefile  |   3 +-
 main/components/router/nas/nas/Makefile     |   3 +-
 main/components/router/shared/bcmtimer.h    |   3 +-
 main/components/router/shared/linux_timer.c | 138 ++++++++++++++++++++--------
 main/components/router/utils/Makefile       |   2 +-
 main/components/router/wlconf/Makefile      |   2 +-
 main/components/router/wps/Makefile         |   2 +-
 8 files changed, 110 insertions(+), 45 deletions(-)

--- a/main/components/router/eapd/linux/Makefile	2017-03-02 02:18:28.000000000 +0530
+++ b/main/components/router/eapd/linux/Makefile	2019-07-02 18:16:20.678276385 +0530
@@ -18,7 +18,8 @@ CFLAGS += -Dlinux
 endif
 
 LDFLAGS += -L$(TOP)/nvram -L$(INSTALLDIR)/nvram/usr/lib -lnvram
-LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared
+#LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared
+LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared -lpthread
 LDFLAGS += $(EXTRA_LDFLAGS)
 
 vpath %.c $(SRCBASE_ROUTER)/eapd $(SRCBASE)/shared
--- a/main/components/router/nas/nas/Makefile	2017-03-02 02:18:28.000000000 +0530
+++ b/main/components/router/nas/nas/Makefile	2019-07-02 18:16:21.166282736 +0530
@@ -30,7 +30,8 @@ CFLAGS	+= -DBCMSUPPL
 CFLAGS	+= -I$(SRCBASE_ROUTER)/eapd
 
 LDFLAGS += -L$(TOP)/nvram -L$(INSTALLDIR)/nvram/usr/lib -lnvram
-LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared
+#LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared
+LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared -lpthread
 LDFLAGS += -L$(TOP)/libbcmcrypto -L$(INSTALLDIR)/libbcmcrypto/usr/lib -lbcmcrypto
 LDFLAGS += $(EXTRA_LDFLAGS)
 
--- a/main/components/router/shared/linux_timer.c	2017-03-02 02:18:29.000000000 +0530
+++ b/main/components/router/shared/linux_timer.c	2019-07-02 18:16:21.166282736 +0530
@@ -50,8 +50,10 @@
 #include <stdio.h>	    // for printf, etc.
 #include <sys/time.h>
 #include <time.h>
+#include <inttypes.h>
 
 #include <typedefs.h>
+#include <pthread.h>
 
 /* define TIMER_PROFILE to enable code which guages how accurate the timer functions are.
  * For each expiring timer the code will print the expected time interval and the actual time
@@ -126,7 +128,7 @@ struct event {
     struct timeval it_interval;
     struct timeval it_value;
     event_callback_t func;
-    int arg;
+    uintptr_t arg;
     unsigned short flags;
     struct event *next;
 #ifdef TIMER_PROFILE
@@ -137,7 +139,9 @@ struct event {
 
 void timer_cancel(timer_t timerid);
 
+static void event_callback_handler();
 static void alarm_handler(int i);
+static void *thread_alarm_handler(void *params);
 static void check_event_queue();
 static void print_event_queue();
 static void check_timer();
@@ -153,6 +157,14 @@ static struct event *event_freelist;
 static uint g_granularity;
 static int g_maxevents = 0;
 
+static pthread_t thread_sigalarm;
+static int thread_running=0;
+static volatile int sigalarm=0;
+static int prev_sigalarm=0;
+static volatile int timer_module_enable_callbacks=0;
+static pthread_mutex_t timer_thread_mutex = PTHREAD_MUTEX_INITIALIZER;
+static pthread_mutex_t timer_module_enable_mutex = PTHREAD_MUTEX_INITIALIZER;
+
 uclock_t uclock()
 {
 	struct timeval tv;
@@ -162,10 +174,46 @@ uclock_t uclock()
 }
 
 
+static void alarm_handler(int i)
+{
+    /*Notify the handling thread that timer expired.*/
+    sigalarm++;
+    return;
+}
+
+static void *thread_alarm_handler(void *params)
+{
+	sigset_t set;
+	sigfillset(&set);
+	pthread_sigmask(SIG_SETMASK, &set, NULL);
+	/* allow SIGALRM signal */
+	sigemptyset(&set);
+	sigaddset(&set, SIGALRM);
+	pthread_sigmask(SIG_UNBLOCK, &set, NULL);
+	while (1) {
+		sigfillset(&set);
+		sigdelset(&set, SIGALRM);
+		/* suspend thread and wait for SIGALRM(timer to expire) */
+		sigsuspend(&set);
+		if (++prev_sigalarm != sigalarm)  {
+			TIMERDBG("Lost or delayed signal handling count = %d\n", prev_sigalarm);
+			prev_sigalarm = sigalarm;
+		}
+		/* bcm_timer_module_enable can block callback handler by acquiring mutext */
+		pthread_mutex_lock(&timer_module_enable_mutex);
+		pthread_mutex_unlock(&timer_module_enable_mutex);
+		if (timer_module_enable_callbacks) {
+			event_callback_handler();
+		}
+	}
+	return NULL;
+}
+
 void init_event_queue(int n)
 {
 	int i;
 	struct itimerval tv;
+	sigset_t set;
 
 	g_maxevents = n;
 	event_freelist = (struct event *) malloc(n * sizeof(struct event));
@@ -189,6 +237,18 @@ void init_event_queue(int n)
 
 	g_granularity = tv.it_interval.tv_usec;
 	signal(SIGALRM, alarm_handler);
+
+	/* start signal handling thread to avoid lockup issues with executing */
+	/* non-reentrant code from inside signal handler */
+	if (!thread_running) {
+		/* disable SIGALRM handler for all threads of this process */
+		sigemptyset(&set);
+		sigaddset(&set, SIGALRM);
+		pthread_sigmask(SIG_BLOCK, &set, NULL);
+		/* start alarm handler thread */
+		pthread_create(&thread_sigalarm, NULL, thread_alarm_handler, NULL);
+		thread_running=1;
+	}
 }
 
 int clock_gettime(
@@ -270,7 +330,7 @@ int timer_connect
 (
 	timer_t     timerid, /* timer ID */
 	void (*routine)(timer_t, int), /* user routine */
-	int         arg      /* user argument */
+	uintptr_t         arg      /* user argument */
 )
 {
 	struct event *event = (struct event *) timerid;
@@ -292,10 +352,8 @@ int timer_change_settime
 	const struct itimerspec * value   /* time to be set */
 )
 {
-	struct event *event = (struct event *) timerid;
-
-	TIMESPEC_TO_TIMEVAL(&event->it_interval, &value->it_interval);
-	TIMESPEC_TO_TIMEVAL(&event->it_value, &value->it_value);
+	timer_cancel(timerid); /* removes the timer from the event queue cleanly */
+	timer_settime(timerid, 0, value, NULL); /* replaces with the new value */
 
 	return 1;
 }
@@ -494,10 +552,12 @@ static void print_event_queue()
 	}
 }
 
+
+
 /* The top element of the event queue must have expired. */
 /* Remove that element, run its function, and reset the timer. */
 /* if there is no interval, recycle the event structure. */
-static void alarm_handler(int i)
+static void event_callback_handler()
 {
 	struct event *event, **ppevent;
 	struct itimerval itimer;
@@ -533,8 +593,11 @@ static void alarm_handler(int i)
 		         ((end-event->start)/((uclock_t)UCLOCKS_PER_SEC/1000)));
 #endif
 
-		/* call the event callback function */
-		(*(event->func))((timer_t) event, (int)event->arg);
+		unblock_timer();
+		/* call the event callback function, unblock timer first */
+		(*(event->func))((timer_t) event, (uintptr_t)event->arg);
+		/* acquire the lock again */
+		block_timer();
 
 		/* If the event has been cancelled, do NOT put it back on the queue. */
 		if (!(event->flags & TFLAG_CANCELLED)) {
@@ -612,28 +675,14 @@ static void alarm_handler(int i)
 	unblock_timer();
 }
 
-static int block_count = 0;
-
 void block_timer()
 {
-	sigset_t set;
-
-	if (block_count++ == 0) {
-		sigemptyset(&set);
-		sigaddset(&set, SIGALRM);
-		sigprocmask(SIG_BLOCK, &set, NULL);
-	}
+	pthread_mutex_lock(&timer_thread_mutex);
 }
 
 void unblock_timer()
 {
-	sigset_t set;
-
-	if (--block_count == 0) {
-		sigemptyset(&set);
-		sigaddset(&set, SIGALRM);
-		sigprocmask(SIG_UNBLOCK, &set, NULL);
-	}
+	pthread_mutex_unlock(&timer_thread_mutex);
 }
 
 void timer_cancel_all()
@@ -642,6 +691,7 @@ void timer_cancel_all()
 	struct event *event;
 	struct event **ppevent;
 
+	block_timer();
 	setitimer(ITIMER_REAL, &timeroff, NULL);
 
 	ppevent = &event_queue;
@@ -650,6 +700,7 @@ void timer_cancel_all()
 		*ppevent = event->next;
 		event->next = NULL;
 	}
+	unblock_timer();
 }
 
 
@@ -683,14 +734,11 @@ void timer_cancel(timer_t timerid)
 			if (event == event_queue && event->next != NULL) {
 				timerclear(&itimer.it_value);
 				getitimer(ITIMER_REAL, &itimer);
-
-				/* subtract the time that has already passed while waiting for this
-				 * timer...
-				 */
-				timersub(&(event->it_value), &(itimer.it_value),
-				         &(event->it_value));
-
-				/* and add any remainder to the next timer in the list */
+				/* add any remainder to the next timer in the list */
+				timeradd(&(event->next->it_value), &(itimer.it_value),
+				         &(event->next->it_value));
+			} else if (event->next != NULL) {
+				/* add cancelled time to the next timer in the list */
 				timeradd(&(event->next->it_value), &(event->it_value),
 				         &(event->next->it_value));
 			}
@@ -768,10 +816,24 @@ int bcm_timer_module_cleanup(bcm_timer_m
 /* Enable/Disable timer module */
 int bcm_timer_module_enable(bcm_timer_module_id module_id, int enable)
 {
-	if (enable)
-		unblock_timer();
-	else
-		block_timer();
+	if (enable) {
+		/*
+		 * trylock protects against multiple calls to enable
+		 * and enabling without call to disable first
+		 */
+		pthread_mutex_trylock(&timer_module_enable_mutex);
+		pthread_mutex_unlock(&timer_module_enable_mutex);
+		timer_module_enable_callbacks = 1;
+	}
+	else {
+		/* trylock protects against multiple calls to disable */
+		if (timer_module_enable_callbacks) {
+			pthread_mutex_lock(&timer_module_enable_mutex);
+		} else  {
+			pthread_mutex_trylock(&timer_module_enable_mutex);
+		}
+		timer_module_enable_callbacks = 0;
+	}
 	return 0;
 }
 
@@ -797,7 +859,7 @@ int bcm_timer_settime(bcm_timer_id timer
 	return timer_settime((timer_t)timer_id, 0, timer_spec, NULL);
 }
 
-int bcm_timer_connect(bcm_timer_id timer_id, bcm_timer_cb func, int data)
+int bcm_timer_connect(bcm_timer_id timer_id, bcm_timer_cb func, uintptr_t data)
 {
 	return timer_connect((timer_t)timer_id, (void *)func, data);
 }
--- a/main/components/router/shared/bcmtimer.h	2017-03-02 02:18:29.000000000 +0530
+++ b/main/components/router/shared/bcmtimer.h	2019-07-02 18:16:21.174282839 +0530
@@ -28,6 +28,7 @@
 
 /* ANSI headers */
 #include <time.h>
+#include <stdint.h>
 
 /* timer ID */
 typedef unsigned int bcm_timer_module_id;
@@ -44,7 +45,7 @@ int bcm_timer_create(bcm_timer_module_id
 int bcm_timer_delete(bcm_timer_id timer_id);
 int bcm_timer_gettime(bcm_timer_id timer_id, struct itimerspec *value);
 int bcm_timer_settime(bcm_timer_id timer_id, const struct itimerspec *value);
-int bcm_timer_connect(bcm_timer_id timer_id, bcm_timer_cb func, int data);
+int bcm_timer_connect(bcm_timer_id timer_id, bcm_timer_cb func, uintptr_t data);
 int bcm_timer_cancel(bcm_timer_id timer_id);
 int bcm_timer_change_expirytime(bcm_timer_id timer_id, const struct itimerspec *timer_spec);
 
--- a/main/components/router/wlconf/Makefile	2017-03-02 02:18:29.000000000 +0530
+++ b/main/components/router/wlconf/Makefile	2019-07-02 18:16:18.938253739 +0530
@@ -23,7 +23,7 @@ CFLAGS  += -Os
 else
 CFLAGS  += -O2
 endif
-LDFLAGS	+= -L$(TOP)/nvram -lnvram -L$(TOP)/shared -lshared
+LDFLAGS	+= -L$(TOP)/nvram -lnvram -L$(TOP)/shared -lshared -lpthread
 LDFLAGS += $(EXTRA_LDFLAGS)
 
 
--- a/main/components/router/utils/Makefile	2017-03-02 02:18:29.000000000 +0530
+++ b/main/components/router/utils/Makefile	2019-07-02 18:16:20.742277217 +0530
@@ -150,7 +150,7 @@ endif
 endif
 
 UTILS := epi_ttcp
-CFLAGS += -s -I$(SRCBASE)/include -I$(SRCBASE)/../components/shared -I$(SRCBASE)/common/include
+CFLAGS += -s -I$(SRCBASE)/include -I$(SRCBASE)/../components/shared -I$(SRCBASE)/common/include -lpthread
 ifeq ($(CONFIG_RTR_OPTIMIZE_SIZE),y)
 CFLAGS  += -Os
 else
--- a/main/components/router/wps/Makefile	2019-07-02 18:18:53.640266747 +0530
+++ b/main/components/router/wps/Makefile	2019-07-02 18:16:18.994254468 +0530
@@ -96,7 +96,7 @@ CFLAGS += -I$(SRCBASE)/include ${WLAN_St
 
 LDFLAGS += $(EXTRA_LDFLAGS)
 
-WPSM_LIBS = -lnvram -lbcm -lshared -lbcmcrypto -lm
+WPSM_LIBS = -lnvram -lbcm -lshared -lbcmcrypto -lm -lpthread
 # Set link libraries search path
 export LIBPATH  = -L$(TOP)/libbcmcrypto -L$(INSTALLDIR)/libbcmcrypto/usr/lib
 export LIBPATH += -L$(TOP)/libbcm -L$(INSTALLDIR)/libbcm/usr/lib
--- a/main/components/router/acsd/Makefile	2017-03-02 02:18:27.000000000 +0530
+++ b/main/components/router/acsd/Makefile	2019-07-02 18:16:20.846278571 +0530
@@ -32,7 +32,7 @@ ifeq ($(WL_MEDIA_ACSD),1)
 CFLAGS += -I$(WLAN_ComponentIncPath)/devctrl_if -I$(WLAN_ComponentIncPath)/proto  -I../../src/shared/bcmwifi/include -Wstrict-aliasing=0 -DWL_MEDIA_ACSD
 else
 LDFLAGS += -L$(TOP)/nvram -L$(INSTALLDIR)/nvram/usr/lib -lnvram
-LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared
+LDFLAGS += -L$(TOP)/shared -L$(INSTALLDIR)/shared/usr/lib -lshared -lpthread
 endif
 
 LDFLAGS += $(EXTRA_LDFLAGS)
