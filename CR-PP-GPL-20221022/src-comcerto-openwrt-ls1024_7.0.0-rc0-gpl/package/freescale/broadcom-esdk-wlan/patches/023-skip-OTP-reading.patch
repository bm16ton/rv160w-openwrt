--- ../broadcom_esdk_wlan-5.1.4.1-5.00.3.bak/main/src/shared/bcmsrom.c	2017-05-17 14:30:20.480045721 +0800
+++ ./main/src/shared/bcmsrom.c	2017-05-17 16:10:08.320671172 +0800
@@ -119,7 +119,11 @@
 #endif
 
 #define SROM_CIS_SINGLE	1
-
+/* use DNI vars */
+#define DNIVARS
+#ifdef DNIVARS
+#define BCMHOSTVARS
+#endif
 
 #if defined(STB) && defined(BCMEXTNVM)
 extern int BCMATTACHFN(init_sromvars_map)(si_t *sih, uint chipId, void *buf, uint nbytes);
@@ -962,6 +966,240 @@
 char BCMATTACHDATA(mfgsromvars)[VARS_MAX];
 int BCMATTACHDATA(defvarslen) = 0;
 #endif 
+#if defined(DNIVARS)
+static char BCMATTACHDATA(defaultsromvars_dni)[] =
+"sromrev=8\0"
+"boardtype=0x5e9\0"
+"subvid=0x14e4\0"
+"devid=0x43a9\0"
+"boardrev=0x1256\0"
+"boardflags=0x200\0"
+"boardflags2=0x9800\0"
+"macaddr=00:90:4c:0c:00:00\0"
+"boardnum=0\0"
+"ccode=0\0"
+"regrev=3\0"
+"ledbh0=255\0"
+"ledbh1=255\0"
+"ledbh2=255\0"
+"ledbh3=131\0"
+"leddc=65535\0"
+"aa2g=3\0"
+"aa5g=0\0"
+"ag0=2\0"
+"ag1=2\0"
+"ag2=255\0"
+"ag3=255\0"
+"txchain=3\0"
+"rxchain=3\0"
+"antswitch=0\0"
+"bxa2g=0\0"
+"rssisav2g=0\0"
+"rssismc2g=0\0"
+"rssismf2g=0\0"
+"bxa5g=0\0"
+"rssisav5g=0\0"
+"rssismc5g=0\0"
+"rssismf5g=0\0"
+"tri2g=0\0"
+"tri5g=0\0"
+"tri5gl=0\0"
+"tri5gh=0\0"
+"rxpo2g=0\0"
+"rxpo5g=0\0"
+"tssipos2g=1\0"
+"extpagain2g=2\0"
+"pdetrange2g=2\0"
+"triso2g=4\0"
+"antswctl2g=0\0"
+"tssipos5g=0\0"
+"extpagain5g=0\0"
+"pdetrange5g=0\0"
+"triso5g=0\0"
+"antswctl5g=0\0"
+"tempthresh=120\0"
+"tempoffset=0\0"
+"rawtempsense=0x0\0"
+"measpower=0x0\0"
+"tempsense_slope=0x0\0"
+"tempcorrx=0x0\0"
+"tempsense_option=0x0\0"
+"freqoffset_corr=0x0\0"
+"iqcal_swp_dis=0x0\0"
+"hw_iqcal_en=0x0\0"
+"elna2g=0\0"
+"elna5g=0\0"
+"phycal_tempdelta=0\0"
+"temps_period=0\0"
+"temps_hysteresis=0\0"
+"measpower1=0x0\0"
+"measpower2=0x0\0"
+"pa0itssit=32\0"
+"pa0maxpwr=76\0"
+"maxp2ga0=76\0"
+"itt2ga0=32\0"
+"pa0b0=0xfe5d\0"
+"pa2gw0a0=0xfe5d\0"
+"pa0b1=0x1629\0"
+"pa2gw1a0=0x1629\0"
+"pa0b2=0xfa73\0"
+"pa2gw2a0=0xfa73\0"
+"pa1itssit=0\0"
+"pa1maxpwr=0\0"
+"itt5ga0=0\0"
+"maxp5ga0=0\0"
+"pa1lomaxpwr=0\0"
+"pa1himaxpwr=0\0"
+"maxp5gha0=0\0"
+"maxp5gla0=0\0"
+"pa1b0=0x0\0"
+"pa5gw0a0=0x0\0"
+"pa1b1=0x0\0"
+"pa5gw1a0=0x0\0"
+"pa1b2=0x0\0"
+"pa5gw2a0=0x0\0"
+"pa1lob0=0x0\0"
+"pa5glw0a0=0x0\0"
+"pa1lob1=0x0\0"
+"pa5glw1a0=0x0\0"
+"pa1lob2=0x0\0"
+"pa5glw2a0=0x0\0"
+"pa1hib0=0x0\0"
+"pa5ghw0a0=0x0\0"
+"pa1hib1=0x0\0"
+"pa5ghw1a0=0x0\0"
+"pa1hib2=0x0\0"
+"pa5ghw2a0=0x0\0"
+"maxp2ga1=76\0"
+"itt2ga1=32\0"
+"pa2gw0a1=0xfe7a\0"
+"pa2gw1a1=0x172f\0"
+"pa2gw2a1=0xfa4d\0"
+"itt5ga1=0\0"
+"maxp5ga1=0\0"
+"maxp5gha1=0\0"
+"maxp5gla1=0\0"
+"pa5gw0a1=0x0\0"
+"pa5gw1a1=0x0\0"
+"pa5gw2a1=0x0\0"
+"pa5glw0a1=0x0\0"
+"pa5glw1a1=0x0\0"
+"pa5glw2a1=0x0\0"
+"pa5ghw0a1=0x0\0"
+"pa5ghw1a1=0x0\0"
+"pa5ghw2a1=0x0\0"
+"maxp2ga2=255\0"
+"itt2ga2=255\0"
+"pa2gw0a2=0xffff\0"
+"pa2gw1a2=0xffff\0"
+"pa2gw2a2=0xffff\0"
+"itt5ga2=255\0"
+"maxp5ga2=255\0"
+"maxp5gha2=255\0"
+"maxp5gla2=255\0"
+"pa5gw0a2=0xffff\0"
+"pa5gw1a2=0xffff\0"
+"pa5gw2a2=0xffff\0"
+"pa5glw0a2=0xffff\0"
+"pa5glw1a2=0xffff\0"
+"pa5glw2a2=0xffff\0"
+"pa5ghw0a2=0xffff\0"
+"pa5ghw1a2=0xffff\0"
+"pa5ghw2a2=0xffff\0"
+"maxp2ga3=255\0"
+"itt2ga3=255\0"
+"pa2gw0a3=0xffff\0"
+"pa2gw1a3=0xffff\0"
+"pa2gw2a3=0xffff\0"
+"itt5ga3=255\0"
+"maxp5ga3=255\0"
+"maxp5gha3=255\0"
+"maxp5gla3=255\0"
+"pa5gw0a3=0xffff\0"
+"pa5gw1a3=0xffff\0"
+"pa5gw2a3=0xffff\0"
+"pa5glw0a3=0xffff\0"
+"pa5glw1a3=0xffff\0"
+"pa5glw2a3=0xffff\0"
+"pa5ghw0a3=0xffff\0"
+"pa5ghw1a3=0xffff\0"
+"pa5ghw2a3=0xffff\0"
+"cck2gpo=0\0"
+"opo=68\0"
+"ofdm2gpo=1145324612\0"
+"ofdm5gpo=0\0"
+"ofdm5glpo=0\0"
+"ofdm5ghpo=0\0"
+"mcs2gpo0=17476\0"
+"mcs2gpo1=17476\0"
+"mcs2gpo2=17476\0"
+"mcs2gpo3=17476\0"
+"mcs2gpo4=26214\0"
+"mcs2gpo5=26214\0"
+"mcs2gpo6=26214\0"
+"mcs2gpo7=26214\0"
+"mcs5gpo0=0\0"
+"mcs5gpo1=0\0"
+"mcs5gpo2=0\0"
+"mcs5gpo3=0\0"
+"mcs5gpo4=0\0"
+"mcs5gpo5=0\0"
+"mcs5gpo6=0\0"
+"mcs5gpo7=0\0"
+"mcs5glpo0=0\0"
+"mcs5glpo1=0\0"
+"mcs5glpo2=0\0"
+"mcs5glpo3=0\0"
+"mcs5glpo4=0\0"
+"mcs5glpo5=0\0"
+"mcs5glpo6=0\0"
+"mcs5glpo7=0\0"
+"mcs5ghpo0=0\0"
+"mcs5ghpo1=0\0"
+"mcs5ghpo2=0\0"
+"mcs5ghpo3=0\0"
+"mcs5ghpo4=0\0"
+"mcs5ghpo5=0\0"
+"mcs5ghpo6=0\0"
+"mcs5ghpo7=0\0"
+"cddpo=0\0"
+"stbcpo=0\0"
+"bw40po=0\0"
+"bwduppo=0\0"
+"rxgainerr2ga0=63\0"
+"rxgainerr2ga1=31\0"
+"rxgainerr2ga2=31\0"
+"rxgainerr5gla0=63\0"
+"rxgainerr5gla1=31\0"
+"rxgainerr5gla2=31\0"
+"rxgainerr5gma0=63\0"
+"rxgainerr5gma1=31\0"
+"rxgainerr5gma2=31\0"
+"rxgainerr5gha0=63\0"
+"rxgainerr5gha1=31\0"
+"rxgainerr5gha2=31\0"
+"rxgainerr5gua0=63\0"
+"rxgainerr5gua1=31\0"
+"rxgainerr5gua2=31\0"
+"subband5gver=7\0"
+"pcieingress_war=15\0"
+"noiselvl2ga0=31\0"
+"noiselvl2ga1=31\0"
+"noiselvl2ga2=31\0"
+"noiselvl5gla0=31\0"
+"noiselvl5gla1=31\0"
+"noiselvl5gla2=31\0"
+"noiselvl5gma0=31\0"
+"noiselvl5gma1=31\0"
+"noiselvl5gma2=31\0"
+"noiselvl5gha0=31\0"
+"noiselvl5gha1=31\0"
+"noiselvl5gha2=31\0"
+"noiselvl5gua0=31\0"
+"noiselvl5gua1=31\0"
+"noiselvl5gua2=31\0"
+"END\0";
+#endif
 
 /* BCMHOSTVARS is enabled only if WLTEST is enabled or BCMEXTNVM is enabled */
 #if defined(BCMHOSTVARS)
@@ -6826,7 +7064,11 @@
 	osl_t *osh = si_osh(sih);
 	bool flash = FALSE;
 	int err = 0;
-
+#if defined(DNIVARS)
+       char *nvram_buf = MALLOC(si_osh((si_t *)sih), MAXSZ_NVRAM_VARS);
+        void    *nvram_fp = NULL;
+        int nv_len = 0, ret = 0, i = 0, len = 0;
+#endif
 	/*
 	 * Apply CRC over SROM content regardless SROM is present or not, and use variable
 	 * <devpath>sromrev's existance in flash to decide if we should return an error when CRC
@@ -6888,28 +7130,6 @@
 		}
 		}
 
-#if defined(BCMNVRAMW) || defined(BCMNVRAMR)
-	/* Use OTP if SPROM not available */
-#ifdef NIC_OTP_OVERRIDE_WAR
-	else if (!(CHIPID(sih->chip) == BCM4345_CHIP_ID) &&
-		((err = otp_read_pci(osh, sih, srom, SROM_MAX)) == 0)) {
-#else
-	else if ((err = otp_read_pci(osh, sih, srom, SROM_MAX)) == 0) {
-#endif
-		/* OTP only contain SROM rev8/rev9/rev10/Rev11 for now */
-
-		if (srom[SROM13_SIGN] == SROM13_SIGNATURE)
-			sromrev = srom[SROM13_CRCREV] & 0xff;
-		else if (srom[SROM12_SIGN] == SROM12_SIGNATURE)
-			sromrev = srom[SROM12_CRCREV] & 0xff;
-		else if (srom[SROM11_SIGN] == SROM11_SIGNATURE)
-			sromrev = srom[SROM11_CRCREV] & 0xff;
-		else if (srom[SROM10_SIGN] == SROM10_SIGNATURE)
-			sromrev = srom[SROM10_CRCREV] & 0xff;
-		else
-			sromrev = srom[SROM4_CRCREV] & 0xff;
-	}
-#endif /* defined(BCMNVRAMW) || defined(BCMNVRAMR) */
 	else {
 		err = 1;
 		BS_ERROR(("Neither SPROM nor OTP has valid image\n"));
@@ -6958,6 +7178,39 @@
 			goto errout;
 		}
 #endif
+#if defined(DNIVARS)
+        nvram_fp = (void*)osl_os_open_image("/sbin/nvram.txt");
+        if (nvram_fp != NULL) {
+		printf("open /sbin/nvram.txt ok\n");
+		base=nvram_buf;
+
+                while ((nv_len = osl_os_get_image_block(nvram_buf, MAXSZ_NVRAM_VARS, nvram_fp)))
+                        len = nv_len;
+
+        	/* Make array of strings */
+		printf("nvram.txt len:%u\n", len);
+        	for (i = 0; i < len; i++, nvram_buf++) {
+                	if ((*nvram_buf == ' ') || (*nvram_buf == '\t') || (*nvram_buf == '\n') ||
+                        	(*nvram_buf == '\0') || ((unsigned char)(*nvram_buf) == 0xFF)) {
+                        	*nvram_buf = '\0';
+                	}
+        	}
+		/* The last one should be null terminator */
+        	*nvram_buf = '\0';
+		vp=nvram_buf;
+        }
+        else {
+		printf("open /sbin/nvram.txt failed, use default nvram paramters\n");
+		vp = base = mfgsromvars;
+		defvarslen = srom_vars_len(defaultsromvars_dni);
+		bcopy(defaultsromvars_dni, vp, defvarslen);
+                vp += defvarslen;
+                /* add final null terminator */
+                *vp++ = '\0';
+        }
+      	goto    varsdone;
+#endif
+
 /* BCMHOSTVARS is enabled only if WLTEST is enabled or BCMEXTNVM is enabled */
 #if defined(BCMHOSTVARS)
 		val = OSL_PCI_READ_CONFIG(osh, PCI_SPROM_CONTROL, sizeof(uint32));
@@ -7167,8 +7420,8 @@
 	ASSERT((vp - base) <= MAXSZ_NVRAM_VARS);
 
 varsdone:
+printf("nvram varsdone\n");
 	err = initvars_table(osh, base, vp, vars, count); /* allocates buffer in 'vars' */
-
 errout:
 /* BCMHOSTVARS are enabled only if WLTEST is enabled or BCMEXTNVM is enabled */
 #if defined(BCMHOSTVARS)
